#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

RED="\033[1;31m"
GREEN="\033[1;32m"
NOCOLOR="\033[0m"

# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=5000
SAVEHIST=10000
setopt appendhistory autocd notify
unsetopt beep
bindkey -e

# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename '/Users/mg/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall

export VISUAL=nvim
export EDITOR="$VISUAL"
# You may need to manually set your language environment
export LANG=en_US.UTF-8

# ssh
export SSH_KEY_PATH="~/.ssh/rsa_id"

# -------------------------------------------------------------------
# FIXES
# -------------------------------------------------------------------

# python fix
export LC_ALL=en_US.UTF-8


# -------------------------------------------------------------------
# PATHS
# -------------------------------------------------------------------

# for grep
path=('/usr/local/opt/grep/libexec/gnubin:$PATH' $path)

# for coreutils
#path=('/usr/local/opt/coreutils/libexec/gnubin:$PATH' $path)

# for my bin's
path=('/Users/mg/bin' $path )

# for MacVim
path=('/Applications/MacVim.app/Contents/bin' $path )

# This is important if you'd like to use TrueColor themes in Neovim
export NVIM_TUI_ENABLE_TRUE_COLOR=1
# This makes Neovim your default editor


# -------------------------------------------------------------------
# FZF
# -------------------------------------------------------------------
# ag (silversearcher-ag) is a faster grep
# I recommend using it if you have to deal with large codebases
# Install it by running `sudo apt-get install silversearcher-ag`
# The variable below makes it a default command to be used by

# fzf for a file path search
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
setopt GLOB_COMPLETE

export FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -g ""'

export FZF_CTRL_T_OPTS='--height=60% --preview="head -n 100 {}" --preview-window=right:50%:wrap'
export FZF_CTRL_T_COMMAND='rg --files '
#export FZF_DEFAULT_COMMAND='rg --files'
#export FZF_CTRL_T_COMMAND='$FZF_DEFAULT_COMMAND'

# -------------------------------------------------------------------
# HOOKS
# -------------------------------------------------------------------

# hook to cd
function chpwd() {
#  clear
  echo
  ls
  echo
}

# -------------------------------------------------------------------
# ALIAS
# -------------------------------------------------------------------

# HIDDEN ALIASES
alias cat=ccat
alias vim=nvim
alias composer='php usr/local/bin/composer'

# PUBLIC ALIASES

alias anaconda='export PATH=/Users/mg/anaconda3/bin:$PATH'

alias s='du -hsc * | sort -h'

alias t='tree'

alias psgrep="ps -fax | grep -v grep | grep -C1 $1"

alias moon="curl 'wttr.in/moon'; echo"
alias wttr="curl 'wttr.in/?0'; echo"
alias weather="curl 'wttr.in/?n'; echo"

alias cal="ncal -w -A2 -C"
alias clock="tty-clock -c"

alias hl="highlight $1 -O ansi"

alias ic="kitty icat $1"

alias yo="open -a yoink"

alias jn="anaconda; jupyter notebook"

alias a-scan="sudo arp-scan --localnet"

# -------------------------------------------------------------------
# FUNCTIONS
# -------------------------------------------------------------------

function age(){
    find . -type f -printf "%T@ %p\n" | sort -nr | awk '{print $2}'
}

function mkcd() {
  case "$1" in
    */..|*/../) cd -- "$1";; # that doesn't make any sense unless the directory already exists
    /*/../*) (cd "${1%/../*}/.." && mkdir -p "./${1##*/../}") && cd -- "$1";;
    /*) mkdir -p "$1" && cd "$1";;
    */../*) (cd "./${1%/../*}/.." && mkdir -p "./${1##*/../}") && cd "./$1";;
    ../*) (cd .. && mkdir -p "${1#.}") && cd "$1";;
    *) mkdir -p "./$1" && cd "./$1";;
  esac
}


function transfer() {
  curl --upload-file $1 https://transfer.sh/$(basename $1);
}


function f() {
  if [[ -z "$2" ]]; then
    find . -iname "*$1*" 2>/dev/null | grep -ih "$1"
  else
    find . -iname "*$1*$2" 2>/dev/null | grep -ih "$1"
  fi
}


function grp() {
  if [[ -z "$2" ]]; then
    grep --exclude-dir=.vimprj --exclude-dir=.git -rn . -e "$1"
  else
    find . -name "*.$2" -exec grep --color=auto -H -n -w -i -e "$1" {} \;
  fi
}


function loc() {
  if [[ -z "$2" ]]; then
    locate -i "$1" | grep --color=never $(pwd) | grep -i "$1"
  else
    locate -i "$1" | grep --color=never $(pwd) | grep -i -E "$1[_a-zA-z0-9\-]*\.$2$"
  fi
}


function randpwd() { </dev/urandom tr -dc '12345!@#$%qwertQWERTasdfgASDFGzxcvbZXCVB' | head -c8; echo;}
function randpwd2() { cat /dev/urandom | tr -Cd a-zA-Z0-9 | fold -w 16 | head -1;}


function diffc() {
  find . -name '*.[ch]' -exec diff -wibu {} $1/{} \;
}


function diffcq() {
  find . -name '*.[ch]' -exec diff -wibuq {} $1/{} \;
}


function dirdiffq() {
    diff --brief -r $1 $2
}

function dirdiff() {
    diff --brief -Nr $1 $2
}

function dwnld() {
    export ec=18
    while [ $ec -eq 18 ]
    do 
        curl -O -C - "$1"
        export ec=$?
    done
}

function jackdcore() {
    jdcore=$(ps -e | grep -v grep | grep jackd)
    if [[ -z "$jdcore" ]]; then
        bash -c "nohup sh -c 'jackd -d coreaudio' &"
    fi
}

function listening() {
    if [ $# -eq 0 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P
    elif [ $# -eq 1 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P | grep -i --color $1
    else
        echo "Usage: listening [pattern]"
    fi
}

FMT="%C(yellow)%h %C(blue)%s%C(auto)%w(0,0,7)%+d%n %an \
%ai%x08%x08%x08%x08%x08%x08%x08%x08%x08 %C(bold)(%ar%x08%x08%x08%x08)%C(reset) \
%n"
alias log="git log --all --pretty='$FMT' --graph"

# -------------------------------------------------------------------
# HELP
# -------------------------------------------------------------------
function help(){

    echo
    echo "${RED}>>> DESKTOP <<<"
    echo "${GREEN}"
    echo "# + TAB               apps switching"
    echo "# + ~                 wind switching"
    echo
    echo "^ + UP                windows overview"
    echo "^ + DOWN              app windows overview"
    echo "^ + 1                 desktop 1"
    echo " ...                  ..."
    echo
    echo "C-x C-e               open CMD in VIM"
    echo
    echo "# + D                 split iTerm"
    echo "# + ALT + ARROWS      move in iTerm splits"
    echo 
    echo "# + SHIFT + e         toggle iTerm timestamps"
    echo "# + +                 increase text size"
    echo "# + -                 decrease text size"
    echo "# + 0                 reset text size"
    echo 

    echo "${RED}>>> FZF <<<"
    echo "${GREEN}"
    echo "**            trigger sequence"
    echo "cd **<TAB>"
    echo "vim ../**<TAB>"
    echo
    echo "^ + R         COMMANDS"
    echo "^ + T         FILES & DIRS"
    echo "ESC + C       CD to PATHS"
    echo

    echo "${RED}>>> ALIASES <<<"
    echo "${GREEN}"
    echo "  > anaconda                      :activate anaconda env"
    echo "  > s                             :print size of folders anf files"
    echo "  > t                             :tree"
    echo "  > psgrep    process             :grep for process in ps"
    echo "  > moon                          :wttr curl moon"
    echo "  > wttr                          :wttr curl one day"
    echo "  > weather                       :wttr curl long"
    echo "  > cal                           :calendar"
    echo "  > clock                         :tty-clock -c"
    echo "  > hl        file                :highlight file"
    echo "  > ic        file                :draw file in terminal"
    echo "  > yo        file                :yoink"
    echo "  > jn                            :source conda, start jupyter notebook"
    echo "  > a-scan                        :arp-scan"
    echo "  > age                           :last mod date of files"
    echo "  > mkcd      dir_name            :mkdir and cd into it"
    echo "  > transfer  file                :upload file to transfer.sh"
    echo "  > f         file  [extension]   :find file"
    echo "  > grp       word  [extension]   :grep for word"
    echo "  > loc       file  [extension]   :locate file"
    echo "  > randpwd                       :generate random phrase"
    echo "  > randpwd2                      :generate random phrase"
    echo "  > diffc     file                :search file and do the diff"
    echo "  > diffcq    file                :search file and do the quiet diff"
    echo "  > dirdiffq  dir dir             :diff for two dirs short"
    echo "  > dirdiff   dir dir             :diff for two dirs"
    echo "  > log                           :git log"
    echo "  > dwnld     file                :curl for given file with resume"
    echo "  > listening [pettern]           :show listening processes"
    echo "${NOCOLOR}"
}

function amethist(){

    echo
    echo "${GREEN}"
    echo "mod1	        option + shift"
    echo "mod2	        ctrl + option + shift"
    echo "${RED}"
    echo "mod1 + space	Cycle layout forward"
    echo "mod1 + h	Shrink the main pane"
    echo "mod1 + l	Expand the main pane"
    echo "${GREEN}"
    echo "mod1 + ,	Increase main pane count"
    echo "mod1 + .	Decrease main pane count"
    echo "${RED}"
    echo "mod1 + j	Move focus counter clockwise"
    echo "mod1 + k	Move focus clockwise"
    echo "${GREEN}"
    echo "mod1 + p	Move focus to counter clockwise screen"
    echo "mod1 + n	Move focus to clockwise screen"
    echo "${RED}"
    echo "mod2 + h	Swap focused window to counter clockwise screen"
    echo "mod2 + l	Swap focused window to clockwise screen"
    echo "mod2 + j	Swap focused window counter clockwise"
    echo "mod2 + k	Swap focused window clockwise"
    echo "${GREEN}"
    echo "mod1 + enter	Swap focused window with main window"
    echo "${RED}"
    echo "mod2 + 1	Throw focused window to space 1"
    echo "...           ..."
    echo "${GREEN}"
    echo "mod2 + w	Throw focused window to screen 1"
    echo "mod2 + e	Throw focused window to screen 2"
    echo "mod2 + r	Throw focused window to screen 3"
    echo "mod2 + q	Throw focused window to screen 4"
    echo "${RED}"
    echo "mod1 + w	Focus Screen 1"
    echo "mod1 + e	Focus Screen 2"
    echo "mod1 + r	Focus Screen 3"
    echo "mod1 + q	Focus Screen 4"
    echo "${GREEN}"
    echo "mod1 + t	Toggle float for focused window"
    echo "mod1 + i	Display current layout"
    echo "mod2 + t	Toggle global tiling"
    echo "${NOCOLOR}"
}

# -------------------------------------------------------------------
# PHP and COMPOSER
# -------------------------------------------------------------------
# valet
export PATH="/Users/mg/.composer/vendor/bin:${PATH}"

# -------------------------------------------------------------------
# Python VIRTUALENV and PIP
# -------------------------------------------------------------------


#source /usr/local/bin/virtualenvwrapper.sh
## pip should only run if there is a virtualenv currently activated
#export PIP_REQUIRE_VIRTUALENV=true
## create commands to override pip restriction.
## use `gpip` or `gpip3` to force installation of
## a package in the global python environment
#gpip(){
#   PIP_REQUIRE_VIRTUALENV="" pip "$@"
#}
#gpip3(){
#   PIP_REQUIRE_VIRTUALENV="" pip3 "$@"
#}
#
#export PATH="/Users/mg/.pyenv/shims:${PATH}"
#export PYENV_SHELL=zsh
#source '/usr/local/Cellar/pyenv/1.2.13_1/libexec/../completions/pyenv.zsh'
#command pyenv rehash 2>/dev/null
#
#
#
#pyenv() {
#  local command
#  command="${1:-}"
#  if [ "$#" -gt 0 ]; then
#    shift
#  fi
#
#  case "$command" in
#  rehash|shell)
#    eval "$(pyenv "sh-$command" "$@")";;
#  *)
#    command pyenv "$command" "$@";;
#  esac
#}
## We want to regularly go to our virtual environment directory
#export WORKON_HOME=~/.virtualenvs
#mkdir -p $WORKON_HOME
#. ~/.pyenv/versions/3.7.3/bin/virtualenvwrapper.sh


if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi
# We want to regularly go to our virtual environment directory
export WORKON_HOME=~/.virtualenvs
mkdir -p $WORKON_HOME
. ~/.pyenv/versions/3.7.3/bin/virtualenvwrapper.sh


